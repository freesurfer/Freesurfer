#!/bin/tcsh -f
# samseg

set VERSION = '$Id: samseg,v 1.1 2017/01/26 00:23:37 greve Exp $';

set outdir = ();
set subject = ();
set usebin = 0;
set usegpu = 0;
set monly = 0;
set MLF = ();
set threads = 1;
set tmpdir = ();
set cleanup = 1;
set LF = ();
set input = ()
set input2 = none
set input3 = none
set computedice = 0;
set diceseg = none
if($?SAMSEG_DATA_DIR == 0) then
  setenv SAMSEG_DATA_DIR /autofs/cluster/koen/koen/GEMSapplications/wholeBrain
endif

# Matlab (must be 8.0)
if($?SAMSEG_MCRROOT == 0) then
  # The mkbin script also uses this env var when compiling
  setenv SAMSEG_MCRROOT /usr/pubsw/common/matlab/8.0
endif

# This is for when running matlab 
set matlab = $SAMSEG_MCRROOT/bin/matlab 

# This is for running the compiled version
# Must match how run_samseg was compiled (must be 8.0?)
if($?LD_LIBRARY_PATH == 0) setenv LD_LIBRARY_PATH
setenv LD_LIBRARY_PATH "$LD_LIBRARY_PATH":"$SAMSEG_MCRROOT/runtime/glnxa64"
setenv LD_LIBRARY_PATH "$LD_LIBRARY_PATH":"$SAMSEG_MCRROOT/bin/glnxa64"
setenv LD_LIBRARY_PATH "$LD_LIBRARY_PATH":"$SAMSEG_MCRROOT/sys/os/glnxa64"
setenv LD_LIBRARY_PATH "$LD_LIBRARY_PATH":"$SAMSEG_MCRROOT/sys/java/jre/glnxa64/jre/lib/amd64/native_threads"
setenv LD_LIBRARY_PATH "$LD_LIBRARY_PATH":"$SAMSEG_MCRROOT/sys/java/jre/glnxa64/jre/lib/amd64/server"
setenv LD_LIBRARY_PATH "$LD_LIBRARY_PATH":"$SAMSEG_MCRROOT/sys/java/jre/glnxa64/jre/lib/amd64"

set inputargs = ($argv);
set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;
set year  = `date +%Y`
set month = `date +%m`
set day   = `date +%d`
set hour   = `date +%H`
set min    = `date +%M`

mkdir -p $outdir
pushd $outdir > /dev/null
set outdir = `pwd`;
popd > /dev/null

if($#tmpdir == 0) then
  if(-dw /scratch)   set tmpdir = /scratch/tmpdir.samseg.$$
  if(! -dw /scratch) set tmpdir = $outdir/tmpdir.samseg.$$
endif
mkdir -p $tmpdir

# Set up log file
if($#LF == 0) if($#LF == 0) set LF = $outdir/samseg.Y$year.M$month.D$day.H$hour.M$min.log
if($LF != /dev/null) rm -f $LF
echo "Log file for samseg" >> $LF
date  | tee -a $LF
echo "" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
echo "cd `pwd`"  | tee -a $LF
echo $0 $inputargs | tee -a $LF
echo "" | tee -a $LF
cat $FREESURFER_HOME/build-stamp.txt | tee -a $LF
echo $VERSION | tee -a $LF
echo SAMSEG_MCRROOT $SAMSEG_MCRROOT | tee -a $LF
echo SAMSEG_DATA_DIR $SAMSEG_DATA_DIR | tee -a $LF
uname -a  | tee -a $LF
if($?PBS_JOBID) then
  echo "pbsjob $PBS_JOBID"  >> $LF
endif

#========================================================
if($usebin) then
  set cmd = (run_samseg $input $outdir $threads $usegpu $input2 $input3)
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) goto error_exit;
else
  if($#MLF == 0) set MLF = $outdir/samseg.m
  rm -f $MLF
  # You should probably have these things in your path already
  # echo "path(path,'/autofs/cluster/koen/koen/GEMS-Release/bin')" >> $MLF
  # echo "path(path,'/usr/pubsw/common/spm/spm8');" >> $MLF
  echo "which run_samseg"  >> $MLF
  echo "which samsegment"  >> $MLF
  echo "which samseg_registerToAtlas"  >> $MLF
  echo "run_samseg('$input','$outdir','$threads','$usegpu','$input2','$input3');" >> $MLF
  if($monly == 0) echo "quit;" >> $MLF
  # threads here is either 1 or not 1. not1 = all cpus
  cat $MLF | tee -a $LF
  if(! $monly) cat $MLF |& $matlab -display iconic $threads |& tee -a $LF
endif
#========================================================
# Compute dice:
if ($computedice) then
  set cmd = (mri_compute_seg_overlap -log $outdir/dice.log $diceseg $outdir/segSubSpace.mgz)
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) echo "error: could not compute seg overlap";
endif

# Cleanup
if($cleanup) rm -rf $tmpdir

# Done
echo " " |& tee -a $LF
set tSecEnd = `date '+%s'`;
@ tSecRun = $tSecEnd - $tSecStart;
set tRunHours = `echo $tSecRun/3600|bc -l`
set tRunHours = `printf %5.2f $tRunHours`
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo "Samseg-Run-Time-Sec $tSecRun" |& tee -a $LF
echo "Samseg-Run-Time-Hours $tRunHours" |& tee -a $LF
echo " " |& tee -a $LF
echo "samseg Done" |& tee -a $LF
exit 0

###############################################

############--------------##################
error_exit:
echo "ERROR: $cmd"
exit 1;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--o":
      if($#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--s":
      if($#argv < 1) goto arg1err;
      set subject = $argv[1]; shift;
      breaksw

    case "--i":
      if($#argv < 1) goto arg1err;
      set input = $argv[1]; shift;
      breaksw

    case "--i2":
      if($#argv < 1) goto arg1err;
      set input2 = $argv[1]; shift;
      breaksw

    case "--i3":
      if($#argv < 1) goto arg1err;
      set input3 = $argv[1]; shift;
      breaksw

    case "--sdd":
      if($#argv < 1) goto arg1err;
      setenv SAMSEG_DATA_DIR $argv[1]; shift;
      breaksw

    case "--monly":
    case "-monly":
      if( $#argv < 1) goto arg1err;
      set MLF =  $1; shift;
      set monly = 1;
      breaksw
    
    case "--threads":
      if( $#argv < 1) goto arg1err;
      set threads =  $1; shift;
      breaksw

    case "--gpu":
      set usegpu = 1;
      breaksw
    case "--no-gpu":
      set usegpu = 0;
      breaksw

    case "--bin":
      set usebin = 1;
      set monly = 0;
      breaksw

    case "--no-bin":
      set usebin = 0;
      breaksw

    case "--log":
      if($#argv < 1) goto arg1err;
      set LF = $argv[1]; shift;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--dice":
      if($#argv < 1) goto arg1err;
      set diceseg = $argv[1]; shift;
      set computedice = 1;
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#subject) then
  if(! -e $SUBJECTS_DIR/$subject) then
    echo "ERROR: cannot find $subject"
    exit 1;
  endif
  set input = $SUBJECTS_DIR/$subject/mri/orig.mgz
  if($#outdir == 0) set outdir = $SUBJECTS_DIR/$subject/mri/samseg
endif
if($#outdir == 0) then
  echo "ERROR: must spec outdir"
  exit 1;
endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "samseg --i file.mgz --o outdir <--i2 file2.mgz <--i3 file3.mgz>>"
  echo "samseg --s subject"
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

To run this, you will need to have the correct configuration in your
shell and in matlab. For the shell, the program needs to find some
samseg-related data, namely mni305_masked_autoCropped.mgz, 
CurrentMeshCollection30New.txt.gz, and namedCompressionLookupTable.txt.
It will look for these in the path pointed to by the $SAMSEG_DATA_DIR
environment variable. If this var is unset, then it defaults to
/autofs/cluster/koen/koen/GEMSapplications/wholeBrain. 

The version of matlab must be 8.0. The matlab used can be controlled
with the SAMSEG_MCRROOT env variable. If unset, then this script will
set it to /usr/pubsw/common/matlab/8.0

In matlab, you will need to have added the GEMS mex file folder and
spm8 to your matlab path, eg,
path(path,'/autofs/cluster/koen/koen/GEMS-Release/bin');
path(path,'/usr/pubsw/common/spm/spm8');

