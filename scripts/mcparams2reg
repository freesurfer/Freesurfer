#!/usr/bin/python

# mcparams2reg - converts an FSFAST-style or MCFLIRT-style motion
# correction parameter file into a text file that can be used as a 
# matrix of MC regressors. It will create all regressors. The
# order and delay can be set.

# $Id: mcparams2reg,v 1.3 2015/11/24 20:09:36 greve Exp $

from __future__ import print_function
import sys;
import os;
import string;
from numpy  import *;

class MCRegClass:
  #######################################
  def __init__(self, value=None):
    self.name = value; # not sure this is needed
    self.output = "";
    self.mcpfile = "";
    self.mcptype = 0;
    self.odsets = [];
    self.mcparams = [];
    self.ncols=0;
    self.X = [];
    self.ntp = 0;
    self.demean = 1;
    self.demeanmtx = 1;
    self.DoFD = 0;
    self.version = "$Id";
    self.debug = 0;
  # end  def __init__(self, value=None):

  #######################################
  def Load(self):
    # Open mc param file
    try:
      fp = open(self.mcpfile, 'r');
    except:
      print("ERROR: opening %s" % (self.mcpfile));
      sys.exit(1);
    #endtry
    # Count number of time points
    self.ntp = 0;
    for line in fp:  self.ntp = self.ntp + 1;
    fp.close;
    # Now read in the data
    self.mcparams = zeros((self.ntp,6));
    fp = open(self.mcpfile, 'r');
    self.ntp = 0;
    for line in fp:  
      linesplit = line.split();
      linelen = len(linesplit);
      if((self.mcpfiletype == 0 and linelen != 6) or (self.mcpfiletype == 1 and linelen < 7)):
        print("ERROR: format line %s " % (line));
        sys.exit(1);
      #end if
      for k in range(0,6):
        self.mcparams[self.ntp,k] = float(linesplit[k+self.mcpfiletype]);
      #end for k
      self.ntp = self.ntp + 1;
    #end for line
    fp.close;
    # Convert mcdat angles to radians
    if(self.mcpfiletype == 1): self.mcparams[:,0:3] = self.mcparams[:,0:3]*pi/180;
  # end load()

  #######################################
  def DemeanParams(self):
    for k in range(0,6):
      ksum = 0;
      for tp in range(0,self.ntp):
        ksum = ksum + self.mcparams[tp,k]
      # end for tp
      kmean = ksum/self.ntp;
      for tp in range(0,self.ntp):
        self.mcparams[tp,k] = self.mcparams[tp,k] - kmean;
      # end for tp
    # end for k
  # end DemeanParams()

  #######################################
  def DemeanMatrix(self):
    for k in range(0,self.ncols):
      ksum = 0;
      for tp in range(0,self.ntp):
        ksum = ksum + self.X[tp,k]
      # end for tp
      kmean = ksum/self.ntp;
      for tp in range(0,self.ntp):
        self.X[tp,k] = self.X[tp,k] - kmean;
      # end for tp
    # end for k
  # end DemeanParams()

  #######################################
  def CreateMatrix(self):
    self.ncols = 6*self.nodsets;
    self.X = zeros((self.ntp,self.ncols));
    for tp in range(0,self.ntp):
      c = 0;
      for odset in self.odsets:
        order = odset[0];
        delay = odset[1];
        tpdelay = tp-delay;
        if(tpdelay < 0): tpdelay = 0;
        for k in range(0,6):
          self.X[tp,c] = pow(self.mcparams[tp,k]-self.mcparams[tpdelay,k],order);
          c = c + 1;
        #end for k 
      # end for odset
    #end for tp
    if(self.demeanmtx): self.DemeanMatrix();
  #end def CreateMatrix

  def MotionMetrics(self):
    xyz1 = self.mcparams[0:self.ntp-1,3:6];
    xyz2 = self.mcparams[1:self.ntp,3:6];
    #print self.mcparams;
    dxyz = sqrt((xyz2 - xyz1)**2);
    rot1 = self.mcparams[0:self.ntp-1,0:3];
    rot2 = self.mcparams[1:self.ntp,0:3];
    drot = 50*absolute(rot2 - rot1);
    self.fdkvd = dxyz.sum(axis=1);
    self.fdkvdmn = self.fdkvd.mean();
    self.fdpow = dxyz.sum(axis=1) + drot.sum(axis=1);
    self.fdpowmn = self.fdpow.mean();
    self.fdrms = zeros((self.ntp-1,1));
    for tp in range(0,self.ntp-1):
      T1 = mcpar2mat(mcreg.mcparams[tp,:]);
      T2 = mcpar2mat(mcreg.mcparams[tp+1,:]);
      self.fdrms[tp] = RMSregDiffMJ(T1,T2,80);
      # Radius = 80 matches flirt
    #end
    self.fdrmsmn = self.fdrms.mean();      
  #end 

#end class MCRegClass

def mcpar2mat(params):
  Txyz = identity(4);
  Txyz[0,3] = params[3];
  Txyz[1,3] = params[4];
  Txyz[2,3] = params[5];
  R1 = identity(4);
  R1[1,1] = cos(params[0]);
  R1[1,2] = sin(params[0]);
  R1[2,1] = -sin(params[0]);
  R1[2,2] = cos(params[0]);
  R2 = identity(4);
  R2[0,0] = cos(params[1]);
  R2[0,2] = sin(params[1]);
  R2[2,0] = -sin(params[1]);
  R2[2,2] = cos(params[1]);
  R3 = identity(4);
  R3[0,0] = cos(params[2]);
  R3[0,1] = sin(params[2]);
  R3[1,0] = -sin(params[2]);
  R3[1,1] = cos(params[2]);
  T = dot(Txyz,R1);
  T = dot(T,R2);
  T = dot(T,R3);
  return T;
#end 

def RMSregDiffMJ(T1,T2,radius):
  Q = T1-T2;
  M = Q[0:3,0:3];
  t = Q[0:3,3];
  MtM = dot(M.transpose(),M);
  MtMtrace = trace(MtM);
  ttt = dot(t.transpose(),t);
  rms = sqrt(radius*radius*MtMtrace/5.0 + ttt);
  return rms;
#end

#---------------------------------------------------------
def print_help():
  print("USAGE: mcparams2reg - create regressor matrix from motion correction parameter files");
  print("  --o output.mtx");
  print("  --mcdat mcpfile : as created by FSFAST");
  print("  --flirt mcpfile : as created by FSL MCFLIRT");
  print("  --od order delay (order >= 1, delay >= 0)");
  print("  --fd : compute frame-wise displacment (output becomes this)");
  print("  --no-demean : do not demean parameters before computing matrix");
  print("  --no-demeanmtx : do not demean final matrix");
  print("  --debug : print out debugging info");
  print("")
  return 0;
#end def print_help:

#---------------------------------------------------------
def argnerr(narg,flag):
  print("ERROR: flag %s requires %d arguments" % (flag,narg));
  sys.exit(1);
#end def parse_args(argv)

#---------------------------------------------------------
def parse_args(argv):
  global mcreg;

  del argv[0]; # get past program name (like shift)

  while(len(argv) != 0):
    flag = argv[0];
    del argv[0];
    if(mcreg.debug): print("flag = %s" % flag);
    if(flag == "--o"):
      if(len(argv) < 1): argnerr(1,flag);
      mcreg.output = argv[0]; del argv[0];
    elif(flag == "--mcdat"):
      if(len(argv) < 1): argnerr(1,flag);
      mcreg.mcpfile = argv[0]; del argv[0];
      mcreg.mcpfiletype = 1;
    elif(flag == "--flirt"):
      if(len(argv) < 1): argnerr(1,flag);
      mcreg.mcpfile = argv[0]; del argv[0];
      mcreg.mcpfiletype = 0;
    elif(flag == "--od"):
      if(len(argv) < 2): argnerr(2,flag);
      order = int(argv[0]); del argv[0];
      if(order < 1):
        print("ERROR: order=%d, must be >=1" % (order));
        sys.exit(1);
      delay = int(argv[0]); del argv[0];
      mcreg.odsets.append([order, delay]);
    elif(flag == "--fd"):
      mcreg.DoFD = 1;
    elif(flag == "--demean"):
      mcreg.demean = 1;
    elif(flag == "--no-demean"):
      mcreg.demean = 0;
    elif(flag == "--demeanmtx"):
      mcreg.demeanmtx = 1;
    elif(flag == "--no-demeanmtx"):
      mcreg.demeanmtx = 0;
    elif(flag == "--debug"):
      mcreg.debug = 1;
    else:
      print("ERROR: flag %s not recognized" % flag); 
      sys.exit(1);
    #endif
  #endwhile
  return 0;
#end def parse_args(argv)

#---------------------------------------------------------
def check_args():
  global mcreg;
  if(len(mcreg.output) == 0):
    print("ERROR: output needed");
    sys.exit(1);
  #endif    
  if(len(mcreg.mcpfile) == 0):
    print("ERROR: mcpfile needed");
    sys.exit(1);
  #endif    
  if(len(mcreg.odsets) == 0 and not mcreg.DoFD):
    print("ERROR: at least one odset needed or --fd");
    sys.exit(1);
  #endif    
  if(len(mcreg.odsets) != 0 and mcreg.DoFD):
    print("ERROR: cannot spec --od and --fd");
    sys.exit(1);
  #endif    
  return 0;
#end check_args()

#---------------------------------------------------------
def isflag(arg):
  if(len(arg) < 3): return 0;
  if(arg[0] == "-" and arg[1] == "-"): return 1;
  return 0;
# end def isflag(arg)

#-----------------------------------------------------------
# ------ main -----------------------------------------------
#-----------------------------------------------------------
mcreg = MCRegClass();

nargs = len(sys.argv) - 1;
if(nargs == 0):
  print_help();
  sys.exit(0);
#endif
parse_args(sys.argv);
check_args();

print("%s" % (mcreg.version));

mcreg.Load();
mcreg.MotionMetrics();
print("FD %g %g %g" % (mcreg.fdkvdmn,mcreg.fdpowmn,mcreg.fdrmsmn));

if(mcreg.DoFD):
  fp = open(mcreg.output,'w');
  fp.write("%20.10f %20.10f %20.10f \n" % (mcreg.fdkvdmn,mcreg.fdpowmn,mcreg.fdrmsmn));
  fp.close();
  print("mcparams2reg done");
  sys.exit(0);
#endif

if(mcreg.demean): mcreg.DemeanParams();

mcreg.nodsets = len(mcreg.odsets);
if(mcreg.debug):
  k = 0;
  for odset in mcreg.odsets:
    k = k + 1;
    order = odset[0];
    delay = odset[1];
    print("%d %d %d" % (k,order,delay));
  #endfor
#endif


if(mcreg.debug):
  print("n odsets = %d, %d, %d time points " % (mcreg.nodsets,mcreg.mcpfiletype,mcreg.ntp));
#endif

mcreg.CreateMatrix();

#U, S, V = linalg.svd(mcreg.X,full_matrices=True);
#mcreg.X = U;

# Write the output
fp = open(mcreg.output,'w');
for tp in range(0,mcreg.X.shape[0]):
  for k in range(0,mcreg.X.shape[1]):
    fp.write("%20.10f " % mcreg.X[tp,k]);
  #end for k
  fp.write("\n");
#end for tp

mcreg.MotionMetrics();

print("mcparams2reg done");
sys.exit(0);
#-------------------------------------------------#

