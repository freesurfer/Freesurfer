#!/usr/bin/env python2
from __future__ import print_function
import warnings
warnings.filterwarnings('ignore', '.*negative int.*')
import os, sys, optparse
import logging
import csv
import fsutils
from fsutils import OverlapStatsParser, BadFileError, overlaplogger

# Original Version - Douglas Greve, MGH
# Rewrite - Krish Subramaniam, MGH
# Based upon: $Id: overlapstats2table,v 1.1 2013/12/19 22:48:36 lzollei Exp $

# globals
l = overlaplogger

# map of delimeter choices and string literals
delimiter2char = {'comma':',', 'tab':'\t', 'space':' ', 'semicolon':';'}

HELPTEXT = """
Converts a overlap stats file created by compute_overlap.csh into 
a table in which each line is a subject and each column is a segmentation 
label. The value will correspond to one of three overlap measures: ('volume 
difference, 'volume overlap (Dice)', 'volume overlap (Jaccard)') in the table. 

The first row is a list of the segmentation names. The first column is the 
input file identifier. 

The input file list can be specified by:
     Specifying all filenames after the --inputfiles flag. 
            --inputfiles file1.txt file2.txt ... fileN.txt 

The measure of interest can be specified by:
    --meas [voldiff, jacc, dice*]

By default, the Dice overlap measure (3rd col in the stats file) is the 
one reported. 

Example:
 overlapstats2table --inputfiles file1.txt file2.txt ... fileN.txt 
    --meas jacc --tablefile summarytable.txt

summrytable.txt will have N+1 rows: (1) 'header' with the identifier
of each input file, (2) jaccard overlap metric for each structure for 
input

The --common flag writes only the ROIs which are common to all 
the subjects. Default behavior is it puts 0.0 in the measure of an ROI
which is not present in a subject. 

The --delimiter option controls what character comes between the measures
in the table. Valid options are 'tab' ( default), 'space', 'comma' and
'semicolon'.

"""

def options_parse():
    """
    Command Line Options Parser for overlapstats2table
    initiate the option parser and return the parsed object
    """
    parser = optparse.OptionParser(version='$Id: overlapstats2table,v 1.1 2013/12/19 22:48:36 lzollei Exp $', usage=HELPTEXT)
    
    # help text
    h_sub = '(REQUIRED) file1 <file2 file3..>'
    h_meas = 'measure: ( voldiff, jacc, dice*)'
    h_t = '(REQUIRED) output table file'
    h_deli = 'delimiter between measures in the table. default is tab (alt comma, space, semicolon )' 
    h_common = 'output only the common labels of all the subjects given'
    h_v = 'increase verbosity'

    # Add the options
    parser.add_option('--filenames', dest='filenames' ,action='callback',
                      callback=fsutils.callback_var,  help=h_sub)
    parser.add_option('--meas', dest='meas',
                      choices=('voldiff','jacc','dice'),
                      default='dice', help=h_meas)
    parser.add_option('-t', '--tablefile', dest='outputfile',
                      help=h_t)
    parser.add_option('-d', '--delimiter', dest='delimiter',
                      choices=('comma','tab','space','semicolon'),
                      default='tab', help=h_deli)
    parser.add_option('--common-labels', action='store_true', dest='commonlabelflag',
                      default=False, help=h_common)
    parser.add_option('-v', '--debug', action='store_true', dest='verboseflag',
                      default=False, help=h_v)
    (options, args) = parser.parse_args()
   
    # error check
    if options.filenames is not None:
        if len(options.filenames) < 1:
            print('ERROR: at least 1 filename must be provided')
            sys.exit(1)
        
    if options.filenames is None: 
        print('ERROR: Specify --filenames to indicate the input files')
        print('       or run with --help for help.')
        sys.exit(1)

    if not options.outputfile:
        print('ERROR: output table name should be specified')
        sys.exit(1)
        
    if options.verboseflag:
        l.setLevel(logging.DEBUG)

    return options

"""
Args:
    the parsed 'options' 
Returns:
    a list of tuples of (specifier names ( subjects), path to the corresponding .stats files)
"""
#def assemble_inputs(options):    
#    o = options
#    specs_paths = []
#    # check the subjects dir
#    subjdir = fsutils.check_subjdirs()
#    print('SUBJECTS_DIR : %s' %subjdir)
#        # in case the user gave --subjectsfile argument
#    if o.subjectsfile is not None:
#        o.subjects=[]
#        try:
#            sf = open(o.subjectsfile)
#            [o.subjects.append(subfromfile.strip()) for subfromfile in sf]
#            sf.close()
#        except IOError:
#            print('ERROR: the file %s doesnt exist'%o.subjectsfile)
#            sys.exit(1)            
#    for sub in o.subjects:
#        specs_paths.append( (sub,  os.path.join(subjdir, sub, 'stats',
#                             o.hemi + '.' + o.parc+'.stats')) )
#    return specs_paths

"""
Args: 
    disorganized_table - the table is of the form (specifier, label_measure_map)
    labelslist - list of segmentation names
    where label_measure_map is a stable hashtable of keys labels names and values the measures.
    The table is disorganized because the length of the label_measure_map may not be the same for all
    specifiers.
    labels present in labelslist are the only labels which go in the table.
    if any specifier doesn't have a label, the measure is 0.0
Returns:
    rows - list of specifiers ( subjects)
    columns - list of label names
    table - a stable 2d table of size len(rows) x len(columns)
"""
def make_table2d(disorganized_table, labelslist):
    dt = disorganized_table

    # create an ordered 2d table
    table = fsutils.Ddict(fsutils.StableDict)
    for _spec, _label_measure_map in dt:
        for label in labelslist:
            try:
                table[_spec][label] = _label_measure_map[label]
            except KeyError:
                table[_spec][label] = 0.0

    return [spec for (spec, i) in dt], labelslist, table

"""
Args: 
    parsed options
    disorganized_table - the table is of the form (specifier, label_measure_map)
    where label_measure_map is a stable hashtable of keys label names and values the measures.
    The table is disorganized because the length of the label_measure_map may not be the same for all
    specifiers.
Returns:
    rows - list of specifiers ( subjects)
    columns - list of label names
    table - a stable 2d table of size len(rows) x len(columns)
"""
def sanitize_table(options, disorganized_table):
    o = options
    dt = disorganized_table

    _union = []
    _spec, _label_measure_map = dt[0]
    intersection = _label_measure_map.keys()
    for spec, label_measure_map in dt:
        labels = label_measure_map.keys()
        _union.append(labels)
        intersection = fsutils.intersect_order(intersection, labels)
        l.debug('-'*20)
        l.debug('Specifier: '+spec)
        l.debug('Intersection upto now:')
        l.debug(intersection)
    #_union is a list of lists. Make it a flat list ( single list )
    temp_union = [item for sublist in _union for item in sublist]
    union = fsutils.unique_union(temp_union)
    l.debug('-'*20)
    l.debug('Union:')
    l.debug(union)

    if o.commonlabelflag:
        #write only the common labels ( intersection )
        row, column, table = make_table2d(dt, intersection)
    else:
        # write all the labels ever encountered
        # if there's no labels for a certain .stats file, write the measure as 0.0
        row, column, table = make_table2d(dt, union)

    return row, column, table

def write_table(options, rows, cols, table):
    """
    Write the table from memory to disk. Initialize the writer class.
    """
    tw = fsutils.TableWriter(rows, cols, table)
    r1c1 = '%s%s' %('aseg', options.meas)
    tw.assign_attributes(filename=options.outputfile, row1col1=r1c1,
                         delimiter=delimiter2char[options.delimiter] )

    # we might need the measure info in columns as well 
    # if not False:
    if False:
        tw.decorate_col_titles('_', '_'+options.meas)
    else:
        tw.write()

if __name__=="__main__":
    # Command Line options are error checking done here
    options = options_parse()
    l.debug('-- The options you entered --')
    l.debug(options) 

    # Assemble the input stats files
    subj_listoftuples = options.filenames; #assemble_inputs(options)

    # Init the table in memory
    # is a list containing tuples of the form 
    # [(specifier, segidlist, structlist, measurelist),] for all specifiers
    pretable = []
    
    # Parse the stats files 
    print('Parsing the .stats files ')
    # for specifier, filepath in subj_listoftuples:
    for filepath in subj_listoftuples:
        try:
            l.debug('-'*20)
            l.debug('Processing file ' + filepath)
            parsed = OverlapStatsParser(filepath)

            label_measure_map = parsed.parse(options.meas)
            l.debug('-- Parsed Labels and Measures --')
            l.debug(label_measure_map)
        except BadFileError as e:
                print('ERROR: The input file '+str(e)+' is not found or is too small to be a valid statsfile')
                sys.exit(1)
        
        # pretable.append( (specifier, label_measure_map)) 
        # print('filepath' filepath)
        pretable.append( (filepath, label_measure_map)) 

    # Make sure the table has the same number of cols for all stats files
    # and merge them up, clean them up etc. More in the documentation of the fn.
    print('Building the table..')
    rows, columns, table = sanitize_table(options, pretable)

    # Write this table ( in memory ) to disk.. function uses TableWriter class
    print('Writing the table to %s' %options.outputfile)
    write_table(options, rows, columns, table)

    # always exit with 0 exit code
    sys.exit(0)
