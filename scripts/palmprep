#!/usr/bin/env python

import os
import sys
import argparse
import glob
from subprocess import call


def errExit(message):
  print('error: ' + message)
  exit(1)


# ---- parse args ----
description = """Prepares and processes a provided glm dir with 'palm'.
                 Any unrecognized arguments will be pased to the palm() matlab function"""
parser = argparse.ArgumentParser(description=description)
parser._action_groups.pop()  #  list required arguments before optional
required = parser.add_argument_group('required arguments')
optional = parser.add_argument_group('optional arguments')
required.add_argument('--glmdir', metavar='PATH', type=str, help='the glm directory to prepare', required=True)
required.add_argument('--zthresh', metavar='FLOAT', type=str, help='z-threshold', required=True)
optional.add_argument('--name', metavar='DIRNAME', type=str, help='name of palm subdirectory (default="palm")', default="palm")
optional.add_argument('--iters', metavar='INT', help='number of iterations', default=10);
optional.add_argument('--monly', help='only create matlab file, do not run', action='store_true');
# check for no args first
if len(sys.argv) == 1:
  parser.print_help()
  sys.exit(1)
# store any unknown args in a list to be passed to matlab script
args, unknown = parser.parse_known_args()

# check glmdir
glmdir = os.path.abspath(args.glmdir)
if not os.path.isdir(glmdir):
  errExit('"{0}" is not a valid directory'.format(glmdir))
# make palm subdir
palmdir = os.path.join(glmdir, args.name)
print('Preparing a palm subdirectory in {0}'.format(palmdir))
# os.makedirs(palmdir, exist_ok=True)  # python3
if not os.path.exists(palmdir): os.makedirs(palmdir)  # settle for python2 for now


# ---- glm info ----
glm_log = os.path.join(glmdir, 'mri_glmfit.log')
if not os.path.isfile(glm_log):
  errExit('cannot find mri_glmfit.log in the glm directory')
with open(glm_log, "r") as f:
  loglines = [line for line in f.readlines() if line.strip()]
# extract hemi
hemi = ''
for line in loglines:
  splitline = line.split()
  if splitline[0] == 'cmdline':
    if 'lh' in splitline: hemi = 'lh'
    elif 'rh' in splitline: hemi = 'rh'
    break
if not hemi:
  errExit("could not extract hemi info from mri_glmfit.log")

# extract input filename
input_file = ''
for line in loglines:
  if line.split()[0] == 'y':
    input_file = line.split()[1]
    break
if not input_file:
  errExit("could not extract input filename from mri_glmfit.log")
if not os.path.isfile(input_file):
  errExit('mri_glmfit input file "{0}" is no longer available at this location'.format(input_file))
print('Using the original glmfit input file {0}'.format(input_file))


# ---- design matrix ----
# read the Xg.dat
xg_path = os.path.join(glmdir, 'Xg.dat')
if not os.path.isfile(xg_path):
  errExit('cannot find Xg.dat in the glm directory')
with open(xg_path) as f:
  xg_content = f.readlines()
xg_content = [x.strip() for x in xg_content]
num_points = len(xg_content)
num_waves = len(xg_content[0].split())

# write the palm design.mat
f = open(os.path.join(palmdir, 'design.mat'), "w")
f.write('/NumWaves {0}\n'.format(num_waves))
f.write('/NumPoints {0}\n'.format(num_points))
f.write('/Matrix\n')
for thing in xg_content:
  if len(thing.split()) != num_waves:
    errExit('number of waves (cols) in Xg.dat are not consistent')
  f.write(thing + '\n')
f.close()


# ---- contrasts ----
# read in the C.dat files
contrast_paths = glob.glob('{0}/*/C.dat'.format(glmdir))
if len(contrast_paths) == 0:
  errExit('cannot find any contrast subdirs (with C.dat) in the glm directory')
contrasts = []
for constrast_file in contrast_paths:
  with open(constrast_file) as f:
    contrasts.append(f.readline().strip())

# write the palm design.con
f = open(os.path.join(palmdir, 'design.con'), "w")
f.write('/NumWaves {0}\n'.format(num_waves))
f.write('/NumPoints {0}\n'.format(len(contrasts)))
f.write('/Matrix\n')
for contrast in contrasts:
  if len(contrast.split()) != num_waves:
    errExit('number of waves (cols) are not consistent')
  f.write(contrast + '\n')
f.close()


# ---- mask ----
maskfile = ''
for fileformat in ['.mgz', '.mgh', '.nii', '.nii.gz']:
  if os.path.isfile(os.path.join(glmdir, 'mask' + fileformat)):
    maskfile = os.path.join(glmdir, 'mask' + fileformat)
    break
if not maskfile:
  errExit('cannot find any mask volume in the glm directory')
if maskfile.endswith('.nii.gz'):
  # nii.gz mask can't be used - must convert to nii
  maskfile = maskfile[:-3]
  print('"nii.gz" format is unsupported - converting mask.nii.gz to mask.nii')
  ret = call(['mri_convert', maskfile + '.gz', maskfile])
  if ret != 0: exit(ret)


# ---- matlab script ----
# write the run_palm.m script
script_path = os.path.join(palmdir, 'run_palm.m')
with open(script_path, "w") as f:
  f.write("input = '%s';\n" % input_file)
  f.write("hemi = '%s';\n" % hemi)
  f.write("maskfile = '%s';\n" % maskfile)
  f.write("zthresh = '%s';\n" % args.zthresh)
  f.write("iters = '%s';\n\n" % args.iters)
  f.write("FREESURFER_HOME = getenv('FREESURFER_HOME');\n")
  f.write("surffile = sprintf('%s/subjects/fsaverage/surf/%s.white',FREESURFER_HOME,hemi);\n")
  f.write("zthreshstr = sprintf('%f',zthresh);\n\n")
  f.write("palm('-i',input,'-m',maskfile,'-s',surffile,'-d','design.mat','-t','design.con',...\n")
  f.write("     '-C', zthreshstr,'-o','palm_output'%s);\n"  % ''.join(",'{0}'".format(w) for w in unknown))

# run the run_palm.m script
if args.monly:
  print("'--monly' requested, so exiting without running...")
  print("To initiate palm processing, cd into %s and run 'run_palm.m' from matlab" % palmdir)
else:
  print('palmprep complete - running the generated matlab script...')
  os.chdir(palmdir)
  try:
    ret = call('matlab < run_palm.m', shell=True)
    exit(ret)
  except KeyboardInterrupt:
    errExit('run_palm.m interrupted')
