#!/bin/tcsh -f
# gca-apply

set VERSION = '$Id: gca-apply,v 1.11 2016/09/08 15:34:44 greve Exp $';

set gca = ();
set subject = ();
set norm = ();
set outdir = ()
set input = ();
set gcabase = ()
set GCARegIterations = ();
set DiceSeg = ();
set DiceFile = ();
set SrcLTA = ();
set SrcNorm = ();
set UseCoreg = 0;
set NoEMReg = 0;
set UseV6LabOpts = 1;
set m3zSpec = ()
set brainmask = brainmask.mgz

set Overwrite = 0;
set tmpdir = ();
set cleanup = 1;
set LF = ();

if($?FS_OMP_NUM_THREADS) then
  setenv OMP_NUM_THREADS $FS_OMP_NUM_THREADS 
else
  setenv OMP_NUM_THREADS 1
endif

set inputargs = ($argv);
set PrintHelp = 0;

if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

source $FREESURFER_HOME/sources.csh

goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;

if($#outdir) then
  mkdir -p $outdir
  if($#LF == 0) set LF = $outdir/gca-apply.$gcabase.log
  set outdir = `getfullpath $outdir`
endif

# Set up log file
if($#LF == 0) set LF = $SUBJECTS_DIR/$subject/scripts/gca-apply.$gcabase.log
if($LF != /dev/null && -e $LF) mv $LF $LF.bak
echo "Log file for gca-apply" >> $LF
date  | tee -a $LF
echo "" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
echo "cd `pwd`"  | tee -a $LF
echo $0 $inputargs | tee -a $LF
echo "" | tee -a $LF
cat $FREESURFER_HOME/build-stamp.txt | tee -a $LF
echo $VERSION | tee -a $LF
uname -a  | tee -a $LF

#========================================================
cd $mdir

date | tee -a $LF

# mri_em_register
if($#outdir == 0) then
  set LTA = transforms/$gcabase.lta
else
  set LTA = $outdir/$gcabase.lta
endif
if($#SrcLTA == 0) then
  # LTA NOT passed on command line, create 
  if($UseCoreg == 0) then
    # Create LTA using mri_em_register
    set opts = (-mask $brainmask)
    set opts = ($opts -uns 3) # used by recon-all, but not with skull
    # but docs imply it is only with skull that it should be used
    set cmd = (mri_em_register $opts $input $gca $LTA)
  else
    # Create LTA using mri_coreg. Use 9dof because that's what em_register does
    set cmd = (mri_coreg --dof 9 --threads $OMP_NUM_THREADS \
      --mov $brainmask --targ $gca --conf-ref --reg $LTA)
  endif
else
  # LTA passed on command line
  set cmd = (cp $SrcLTA $LTA)
endif
echo $cmd |& tee -a $LF
fs_time $cmd |& tee -a $LF
if($status) exit 1;

date | tee -a $LF

# mri_ca_normlize
if($#outdir == 0) then
  set norm = norm.$gcabase.mgz
else
  set norm = $outdir/norm.$gcabase.mgz
endif
if($#SrcNorm == 0) then
  set cmd = (mri_ca_normalize -mask $brainmask $input $gca $LTA $norm)
else
  set cmd = (cp $SrcNorm $norm)
endif
echo $cmd | tee -a $LF
fs_time $cmd |& tee -a $LF
if($status) exit 1;

date | tee -a $LF

# mri_ca_register
if($#m3zSpec == 0) then
  if($#outdir == 0) then
    set m3z = transforms/$gcabase.m3z
  else
    set m3z = $outdir/$gcabase.m3z
  endif
  set opts = (-align-after -mask $brainmask -T $LTA)
  set opts = ($opts -nobigventricles) # Used by recon-all
  # These are not used by recon-all but used in rebuild_gca_atlas.csh
  #set opts = ($opts -smooth 1.0 -levels 2) 
  set cmd = (mri_ca_register $opts $norm $gca $m3z)
  if($#GCARegIterations) set cmd = ($cmd -gcareg-iters $GCARegIterations)
  echo $cmd |& tee -a $LF
  fs_time $cmd |& tee -a $LF
  if($status) exit 1;
endif

date | tee -a $LF

# mri_ca_label
if($#outdir == 0) then
  set aseg = $gcabase.aseg.mgz
else
  set aseg = $outdir/$gcabase.aseg.mgz
endif
set opts = (-align)
if($UseV6LabOpts) then
  set opts = ($opts -relabel_unlikely 9 .3)
  set opts = ($opts -prior 0.5)
endif
#set opts = ($opts -nobigventricles) # not used in recon-all, used in rebuild_gca_atlas.csh
set cmd = (mri_ca_label $opts $norm $m3z $gca $aseg)
echo $cmd |& tee -a $LF
fs_time $cmd |& tee -a $LF
if($status) exit 1;

date | tee -a $LF

# Compute segstats
if($#outdir == 0) then
  set statsfile = ../stats/$gcabase.stats
else
  set statsfile = $outdir/$gcabase.stats
endif
set cmd = (mri_segstats --seg $aseg --sum $statsfile \
  --in $norm --pv $norm --empty --excludeid 0 \
  --ctab $FREESURFER_HOME/ASegStatsLUT.txt --subject $subject \
  --in-intensity-name norm.$gcabase --in-intensity-units MR )
echo $cmd |& tee -a $LF
$cmd |& tee -a $LF
if($status) exit 1;

date | tee -a $LF

if($#DiceSeg) then
  set cmd = (mri_compute_seg_overlap -cortex 0 -L $DiceFile \
    -table $DiceFile.table $gcabase.aseg.mgz $DiceSeg)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

#========================================================
# Cleanup
# if($cleanup) rm -rf $tmpdir

# Done
echo " " |& tee -a $LF
set tSecEnd = `date '+%s'`;
@ tSecRun = $tSecEnd - $tSecStart;
set tRunHours = `echo $tSecRun/3600|bc -l`
set tRunHours = `printf %5.2f $tRunHours`
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo "gca-apply-Run-Time-Sec $tSecRun" |& tee -a $LF
echo "gca-apply-Run-Time-Hours $tRunHours" |& tee -a $LF
echo " " |& tee -a $LF
echo "gca-apply Done" |& tee -a $LF
exit 0

###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--gca":
      if($#argv < 1) goto arg1err;
      set gca = $argv[1]; shift;
      if(! -e $gca) then
        echo "ERROR: cannot find $gca"
        exit 1;
      endif
      breaksw

    case "--gca-rb-2016":
      set gca = $FREESURFER_HOME/average/RB_all_2016-05-10.vc700.gca
      if(! -e $gca) then
        echo "ERROR: cannot find $gca"
        exit 1;
      endif
      breaksw

    case "--s":
      if($#argv < 1) goto arg1err;
      set subject = $argv[1]; shift;
      breaksw

    case "--o":
      if($#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--input":
      if($#argv < 1) goto arg1err;
      set input = $argv[1]; shift;
      breaksw

    case "--brainmask":
      if($#argv < 1) goto arg1err;
      set brainmask = $argv[1]; shift;
      breaksw

    case "--base":
      if($#argv < 1) goto arg1err;
      set gcabase = $argv[1]; shift;
      breaksw

    case "--overwrite":
      set Overwrite = 1;
      breaksw

    case "--no-segstats":
      set DoSegStats = 0;
      breaksw

    case "--log":
      if($#argv < 1) goto arg1err;
      set LF = $argv[1]; shift;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--gcareg-iters":
      # For testing, to make ca_reg run faster
      if($#argv < 1) goto arg1err;
      set GCARegIterations = $argv[1]; shift;
      breaksw

    case "--threads":
    case "--nthreads":
      if($#argv < 1) goto arg1err;
      setenv OMP_NUM_THREADS $argv[1]; shift
      breaksw

    case "-sd":
    case "--sd":
      if ( $#argv < 1) goto arg1err;
      setenv SUBJECTS_DIR $argv[1]; shift;
      if(! -e $SUBJECTS_DIR) then
        echo "ERROR: cannot find SUBJECTS_DIR $SUBJECTS_DIR"
        exit 1;
      endif
      setenv SUBJECTS_DIR `getfullpath $SUBJECTS_DIR`
      breaksw

    case "--lta":
      if($#argv < 1) goto arg1err;
      set SrcLTA = $argv[1]; shift;
      if(! -e $SrcLTA) then
        echo "ERROR: cannot find $SrcLTA"
        exit 1;
      endif
      set SrcLTA = `getfullpath $SrcLTA`
      breaksw

    case "--norm":
      if($#argv < 1) goto arg1err;
      set SrcNorm = $argv[1]; shift;
      if(! -e $SrcNorm) then
        echo "ERROR: cannot find $SrcNorm"
        exit 1;
      endif
      set SrcNorm = `getfullpath $SrcNorm`
      breaksw

    case "--m3z":
      if($#argv < 1) goto arg1err;
      set m3zSpec = $argv[1]; shift;
      breaksw

    case "--coreg":
      set UseCoreg = 1;
      breaksw
    case "--no-coreg":
      set UseCoreg = 0;
      breaksw

    case "--no-emreg":
      set NoEMReg = 1;
      breaksw
    case "--emreg":
      set NoEMReg = 0;
      breaksw

    case "--no-v6labopts":
      set UseV6LabOpts = 0;
      breaksw

    case "--v6labopts":
      set UseV6LabOpts = 1;
      breaksw

    case "--dice":
      if($#argv < 2) goto arg2err;
      set DiceSeg = $argv[1]; shift;
      set DiceFile = $argv[1]; shift;
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#gca == 0) then
  echo "ERROR: must spec gca"
  exit 1;
endif
if($#subject == 0) then
  echo "ERROR: must spec subject"
  exit 1;
endif
set sdir = $SUBJECTS_DIR/$subject
set mdir = $sdir/mri
if(! -e $sdir) then
  echo "ERROR: cannot find $subject"
  exit 1;
endif
if($#input == 0) set input = nu.mgz
foreach f ($mdir/$brainmask $mdir/$input)
  if(! -e $f) then
    echo "ERROR: cannot find $f"
    exit 1;
  endif
end

if($NoEMReg) then
  set SrcLTA = $mdir/transforms/talairach.lta
endif

# Check whether the outputs already exist
if($#gcabase == 0) set gcabase = `basename $gca .gca`
set lta   = $mdir/transforms/$gcabase.lta
set norm  = $mdir/norm.$gcabase.mgz
set aseg  = $mdir/$gcabase.aseg.mgz
set stats = $sdir/stats/$gcabase.stats

if(-e $lta && ! $Overwrite) then
  echo "ERROR: $lta already exists"
  exit 1;
endif
if(-e $norm && ! $Overwrite) then
  echo "ERROR: $norm already exists"
  exit 1;
endif
if(-e $aseg && ! $Overwrite) then
  echo "ERROR: $aseg already exists"
  exit 1;
endif
if(-e $stats && ! $Overwrite) then
  echo "ERROR: $stats already exists"
  exit 1;
endif

if($#DiceSeg && ! -e $mdir/$DiceSeg) then
  echo "ERROR: cannot find $mdir/$DiceSeg"
  exit 1;
endif

if($#m3zSpec == 0) then
  set m3z   = $mdir/transforms/$gcabase.m3z
  if(-e $m3z && ! $Overwrite) then
    echo "ERROR: $m3z already exists"
    exit 1;
  endif
else
  set m3z = $mdir/transforms/$m3zSpec
  if(! -e $m3z) then
    echo "ERROR: cannot find $m3z"
    exit 1
  endif
endif


set gca = `getfullpath $gca`

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "gca-apply : apply a gca, including em_reg, ca_norm, ca_reg, and ca_label"
  echo "  --gca gcafile"
  echo "  --s subject"
  echo ""
  echo " Other options"
  echo "  --overwrite : overwrite lta, norm, m3z, and aseg if they exist"
  echo "  --nthreads nthreads : control number of OMP threads"
  echo "  --base gcabase : use gcabase when naming output files (default is basename gcafile)"
  echo "  --no-segstats : do not compute segstats "
  echo "  --sd SUBJECTS_DIR, or -sd "
  echo "  --dice DiceSeg DiceFile "
  echo "  --lta SrcLTA : use SrcLTA instead of running mri_em_register "
  echo "  --norm SrcNorm : use SrcNorm instead of running mri_ca_normalize "
  echo "  --input input.mgz : defalt is nu.mgz "
  echo "  --brainmask newbrainmask.mgz : defalt is brainmask.mgz "
  echo "  --o outdir : use this for output instead of SUBJECTS_DIR "
  echo "  --coreg : use mri_coreg instead of mri_em_register (--no-coreg)"
  echo "  --no-v6labopts : do not include -relabel_unlikely 9 .3 -prior 0.5 with mri_ca_label":
  echo "  --m3z m3zfile":
  echo "  --gca-rb-2016 : use RB_all_2016-05-10.vc700.gca"
  echo ""
  echo "  --gcareg-iters : set to 1, only for testing"
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

Applies a GCA, performing the steps of mri_em_register,
mri_ca_normalize, mri_ca_register, and mri_ca_label (and possibly
mri_segstats). This script is designed to replicate the stages in
recon-all but does not overwrite any of those files. Single threaded,
this script may take 8 hours or so because mri_ca_register is done.

Creates files with the names:

gcabase.lta
gcabase.m3z
norm.gcabase.mgz
gcabase.aseg.mgz
gcabase.stats

Where gcabase is either `basename gcafile` or whatever is passed with --gcabase

When computing segstats, it uses partial volume correction with norm.gcabase.mgz.

Requires that nu.mgz (or --input instead of nu.mgz) and brainmask.mgz
(or --brainmask instead of brainmask.mgz) be present and ideally
created in the same way as when the atlas was trained on the training
subjects. When using gcatrain, the brainmask.mgz and nu.mgz are
created with:

recon-all -s subject -autorecon1 -no-talcheck

If --dice is specified, then the dice coefficient is computed using
mri_compute_seg_overlap using $SUBJECTS_DIR/$subject/mri/$DiceSeg
and the output will be put in $SUBJECTS_DIR/$subject/$DiceFile

--no-v6labopts 

do not include "-relabel_unlikely 9 .3 -prior 0.5" as part of the
mri_ca_label command options.  This are v6 options that are not part
of the 5.3 command line.

