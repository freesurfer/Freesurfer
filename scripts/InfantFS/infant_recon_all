#!/bin/tcsh -ef

##
## For infants between 0-2yrs of age!
##

set inputargs = ($argv);
set VERSION = '$Id: infant_recon_all,v 1.00 2017/01/10 12:27:40 lzollei Exp $';

set checkresults        = 0 # after each processing step FreeView is called to visualize the results
set nolog               = 0 # keep logging the processing steps
set cleanup             = 0 # eventually turn this on

set withaparc           = 0 # segmentation with parcellation labels -- TODO: NOT TESTED with parcellated templates yet!!
set fsdirset            = 0
set maskedinput         = 0

# default is using all CNY-BCH templates
set defaultinfants      = 1 # CNY-BCH training set
set newborns            = 0
set oneyearolds         = 0
set withUCT             = 0
set allnewborns         = 0
set trainingsetsize     = 4 # set, by default, only for full  CNY-BCH templates
set subjage             = -10

set force               = 0 # force overwrite; delete all previously generated files / directories

set withGMWM            = 1
set forcegmwm           = 0 # if set, check that at least one training subject has a GMWM segmentation!
set forcegmwm2          = 0 # if set, force to choose at least one training subject has a GMWM segmentation!

set avoidtraining       = 0
set setksize            = 0

set useMI               = 0
set PrintHelp = 0;

source $FREESURFER_HOME/bin/set_infant_recon_params.csh
set TEMPLATE_SUBJECTS = ($CNYBCH_SUBJECTS) # the full CNYBCH training set
set TEMPLATE_AGES     = ($CNYBCH_AGES)
setenv TEMPLATE_SUBJECTS_DIR  $CNYBCH_TEMPLATE_SUBJECTS_DIR 

## read input
set cmdline = ($argv);

if($#argv == 0) goto usage_exit;

while( $#argv != 0 )
  set flag = $argv[1]; shift;
  switch($flag)
    case "-h"
    case "-u"
    case "-usage"
    case "--usage"
    case "-help"
    case "--help"
      set PrintHelp = 1;
      goto usage_exit;
      breaksw
    case "--subject":
    case "--s":
      if ( $#argv < 1) goto arg1err;
      set subj = $argv[1]; shift;
      breaksw
    case "--age":
      if ( $#argv < 1) goto arg1err;
      set subjage = $argv[1]; shift;
      breaksw
    case "--kneigh":
      if ( $#argv < 1) goto arg1err;
      set setksize = 1;
      set trainingsetsize = $argv[1]; shift;
      breaksw
    case "--outdir":
      if ( $#argv < 1) goto arg1err;
      set FS_DIR = $argv[1]; shift;
      set fsdirset = 1;
      breaksw
    case "--aparc":
      set withaparc = 1;
      breaksw
    case "--masked":
      if ( $#argv < 1) goto arg1err;
      set maskedinputfile = $argv[1]; shift; 
      set maskedinput = 1;
      breaksw
    case "--newborn":
      set defaultinfants = 0;
      set newborns = 1; # use newborn training set from CNY-BCH for the processing
      set TEMPLATE_SUBJECTS = ($CNYBCH_NEONATES) 
      echo The template subjects will come from: $TEMPLATE_SUBJECTS
      breaksw
    case "--oneyear":
      set defaultinfants = 0;
      set oneyearolds = 1; # use one-year-old training set from CNY-BCH for the processing
      set TEMPLATE_SUBJECTS = ($CNYBCH_AROUNDONE) 
      breaksw
    case "--UCT":
      set defaultinfants = 0;
      set withUCT = 1; # use newborn training set from South Africa for the processing
      set TEMPLATE_SUBJECTS = ($UCT_SUBJECTS)
      unsetenv TEMPLATE_SUBJECTS_DIR
      setenv TEMPLATE_SUBJECTS_DIR  $UCT_TEMPLATE_SUBJECTS_DIR  
     breaksw
    case "--allnewborns":
      set defaultinfants = 0;
      set allnewborns = 1; # use all available newborn training sets (CNY-BCH, UCT); TODO: implement! also ask for number of subset!!
      set TEMPLATE_SUBJECTS = ($CNYBCH_NEONATES $UCT_SUBJECTS)
      unsetenv TEMPLATE_SUBJECTS_DIR
      setenv TEMPLATE_SUBJECTS_DIR /tmp
      echo "NOT IMPLEMENTED YET!"
      exit 1
      breaksw
    case "--force":
      set force = 1; 
      breaksw
    case "--avoidtraining":
      if ( $#argv < 1) goto arg1err;
      set avoidtrainingname = $argv[1]; shift;
      set avoidtraining = 1;  # this option is for testing purposes; when set it avoids using the same training subject for the same test subject
      breaksw
    case "--MI":
      set useMI = 1; #  training subject selection with MI
      breaksw
    case "--gmwm":
      set forcegmwm = 1; 
      breaksw
    case "--gmwm2":
      set forcegmwm2 = 1; 
      breaksw
    default:
      echo ERROR: Flag $flag unrecognized.
      echo $cmdline
      exit 1
      breaksw
  endsw
end

##
## check input
##
if($#SUBJECTS_DIR == 0) then
  echo "ERROR: must spec a SUBJECTS_DIR to indicate the location of the input data"
  exit 1;
endif
if($#subj == 0) then
  echo "ERROR: must spec a subject id"
  exit 1;
endif
if (($maskedinput == 0) && !(-e $SUBJECTS_DIR/$subj/mprage.nii.gz)) then
  echo "ERROR: must have the input file in $SUBJECTS_DIR/$subj/mprage.nii.gz!"
  exit 1;
endif
if(($defaultinfants) && ($subjage < 0)) then
  echo "ERROR: must set the age (in months!) for the subject to be analyzed"
  exit 1;
endif
if !($defaultinfants + $newborns + $oneyearolds + $withUCT + $allnewborns == 1) then
  echo "ERROR: trainingset erroneously defined"
  exit 1;
endif

# If running on the cluster, do not use freeview for checking the results.
if($CLUSTERRUN) then
  set checkresults = 0
endif

##
## a couple more parameters...
##
set origdir  = $SUBJECTS_DIR/$subj
if !($fsdirset) then 
  set FS_DIR = $origdir
endif

# setenv WORK_DIR $origdir/work
setenv WORK_DIR $FS_DIR/work
if ($force) then 
  rm -fr $WORK_DIR
endif
mkdir -p $WORK_DIR

##
## Setting up the default params and logging utilities 
##
set StartTime = `date  +%s`;
set DateString = "`date '+%y%m%d%H%M'`"
if(! $nolog) then
  set currdir = `pwd`
  set LF  = $WORK_DIR/${subj}_infant_recon_all.$DateString.log
  set sLF = ${LF:h}/summary.${LF:t}
  if(-e $LF) mv $LF $LF.old;
  if(-e $sLF) mv $sLF $sLF.old;
  echo ""
  echo "Log file is $LF"
  echo ""
else
  set LF = /dev/null
endif
echo "Logfile for infant_recon_all" >> $LF
echo "Summary logfile for infant_recon_all" >> $sLF
if ($withUCT) then
  echo "** Using the South African training data set **" >> $LF
  echo "** Using the South African training data set **" >> $sLF
endif
if ($newborns) then
  echo "** Using CNYBCH newborns as training data set **" >> $LF
  echo "** Using CNYBCH newborns as training data set **" >> $sLF
endif
if ($oneyearolds) then
  echo "** Using CNYBCH one-year-olds as training data set **" >> $LF
  echo "** Using CNYBCH one-year-olds as training data set **" >> $sLF
endif

set tmpMsg = `date`
echo $tmpMsg |& tee -a $LF
echo $tmpMsg >> $sLF
echo $inputargs |& tee -a $LF
echo $inputargs >> $sLF
echo $VERSION |& tee -a $LF
echo $VERSION >> $sLF
set tmpMsg = `hostname`
echo $tmpMsg |& tee -a $LF
echo $tmpMsg >> $sLF
set tmpMsg = `uname -a`
echo $tmpMsg |& tee -a $LF
echo $tmpMsg >> $sLF

########
######## Start the PROCESSING
########

echo Processing the following subject: $subj

## preprocessing the data
echo "Preprocessing step..." >> $sLF

if !($maskedinput) then # the input file is not skullstripped yet

set originput = $origdir/mprage.mgz
if !(-e $originput) then
  set originput = $origdir/mprage.nii.gz
else
  set cmd = (mri_convert $originput ${originput:r}.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 
endif

set infile   = $originput
if !(-e $infile) then 
  echo "ERROR: The input data to be processed does not exist:" $infile
  exit 1;
endif
echo "INPUT FILE $infile" | tee -a $sLF | tee -a $LF

set nufile = $WORK_DIR/${infile:t:r:r}.nu.nii.gz
if !(-e $nufile) then
  set cmd  = (mri_nu_correct.mni --i $infile --o $nufile --n 2)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 
endif
echo "NU FILE $nufile" | tee -a $sLF | tee -a $LF

set infile  = $nufile
set outfile = ${infile:r:r}.conf.nii.gz

##
if !(-e $outfile) then
  # set cmd = ( mri_convert -c $infile $outfile )
  set cmd = ( mri_convert --conform-dc $infile $outfile ) ## NB: 01/10/2017
  echo $cmd >> $LF
  echo $cmd >> $sLF 
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
echo "CONFORMED FILE $outfile" | tee -a $sLF | tee -a $LF

if ($checkresults) then 
  freeview -v $originput $nufile $outfile
endif

set preprocessedfile = $outfile

##
## compute masked data
##

set infile     = $preprocessedfile
set maskfile   = ${infile:r:r}.mask.nii.gz
set maskedfile = ${maskfile:r:r}ed.nii.gz

if !(-e $maskfile) then
  set cmd = (picasso.sh -in  ${infile} -out ${maskfile} -pediatric)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if ($status) exit 1;
endif
echo "MASK FILE $maskfile" | tee -a $sLF | tee -a $LF

if !(-e $maskedfile) then
  set cmd = (mri_mask $infile $maskfile $maskedfile )
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if ($status) exit 1;
endif
echo "MASKED FILE $maskedfile" | tee -a $sLF | tee -a $LF

if ($checkresults) then 
  freeview -v $infile ${maskedfile}:colormap=heat
endif

else
 set maskedfile = $maskedinputfile
 set cmd = (mri_convert --conform-dc $maskedfile $WORK_DIR/mprage.nu.conf.masked.nii.gz)
 echo $cmd >> $LF
 echo $cmd >> $sLF
 $cmd |& tee -a $LF
 if ($status) exit 1; 
endif
echo "MASKED FILE $maskedfile" | tee -a $sLF | tee -a $LF

####
## In case TRAINING SUBSET NEEDS TO BE IDENTIFIED
# echo $withUCT  $newborns $oneyearolds $setksize
if (($withUCT || $newborns || $oneyearolds) && $setksize) then # need to select a subset of the training datasFSSCRIet -- use MI here 
  echo NEED to select a subset of the training dataset....
  set outfname = $WORK_DIR/trainingsubjects_MI.txt
  echo OUTFNAME $outfname
  if ($avoidtraining) then
    set cmd = (find_neighbors_byMI_extended.csh --f $maskedfile -trpool $TEMPLATE_SUBJECTS --k $trainingsetsize --outfile $outfname --checkconflict $avoidtrainingname)
  else
    set cmd = (find_neighbors_byMI_extended.csh --f $maskedfile --trpool $TEMPLATE_SUBJECTS --k $trainingsetsize --outfile $outfname)
  endif
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if ($status) exit 1;
  set TEMPLATE_SUBJECTS = (`cat $outfname`)
  echo $TEMPLATE_SUBJECTS
endif
####

##
## compute automated segmentation of the input file
##
set voltype = norm # of the training subjects

##
## SELECT a subset of training subjects if all are used and not newborn or one-year-old
## TODO: allow the newborns to be subsetted, too!
##
#echo $withUCT  $newborns $avoidtraining
if (($withUCT || $newborns) && $avoidtraining) then
  echo Removing traning subject to be avoided $avoidtrainingname....
  set N = $#TEMPLATE_SUBJECTS
  echo Total number of template subjects $N
  set found = 0
  set counter = 1
  foreach s ($TEMPLATE_SUBJECTS)
    if ($s == $avoidtrainingname) then
      set found = 1
      break
    endif
    @ counter = $counter + 1
  end
  if ($found) then
    echo Subject found! $counter
    echo $TEMPLATE_SUBJECTS
    switch ($counter)
      case "1"
        echo $TEMPLATE_SUBJECTS[2-$N]
        set TEMPLATE_SUBJECTS = ($TEMPLATE_SUBJECTS[2-$N])
        #echo $TEMPLATE_SUBJECTS
        breaksw
      case "$N"
        @ endn = $N - 1
        echo ENDN $endn
        set TEMPLATE_SUBJECTS = ($TEMPLATE_SUBJECTS[1-$endn])
        breaksw
      default:
        echo COUNTER $counter
        @ a = $counter - 1
        @ z = $counter + 1
        echo N1 $a
        echo N2 $z
        set TEMPLATE_SUBJECTS = ($TEMPLATE_SUBJECTS[1-$a] $TEMPLATE_SUBJECTS[$z-$N])
        breaksw
    endsw
    echo $N 
    set N = $#TEMPLATE_SUBJECTS
    echo $N 
  endif
  echo $TEMPLATE_SUBJECTS
endif

#echo $defaultinfants
if ($defaultinfants) then # need to select $trainingsetsize number of subjects based on age TODO: implement other options, eg MI
  echo USING the default set of training dataset....
  set outfname = $WORK_DIR/selectedtrainingsubjects.txt
  echo FINDING $trainingsetsize training subjects to work with...
  set postfix = ()
  if ($avoidtraining) then 
    set postfix = (--checkconflict $avoidtrainingname)
  endif
  set cmd = (find_neighbors_byAge_extended.csh --age $subjage --trages $TEMPLATE_AGES)
  if ($useMI) then 
    set cmd = (find_neighbors_byMI_extended.csh --f $maskedfile)
  endif
  set cmd = ($cmd --trpool $TEMPLATE_SUBJECTS --k $trainingsetsize --outfile $outfname )
  if ($forcegmwm2) then
    set cmd = ($cmd --gmwm --gmwmtrpool $CNYBCH_GMWM_SUBJECTS)
    if !($useMI) then
      set cmd = ($cmd --gmwmtrages $CNYBCH_GMWM_AGES)
    endif
  endif
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if ($status) exit 1; 
  set TEMPLATE_SUBJECTS = (`cat $outfname`)
endif

#echo The template subjects will come from: $TEMPLATE_SUBJECTS
if ($forcegmwm) then 
  # Make sure that there is at least one training subject with GMWM
  set found = 0;
  foreach tsubj ($TEMPLATE_SUBJECTS)
    if (`find_cerebral_wm_labels.csh $TEMPLATE_SUBJECTS_DIR/$tsubj/manualseg.nii.gz`) then
      set found = 1;
      break
    endif
  end
  if !($found) then
    echo "Choose more subjects as training set does not include GMWM!"
    exit 1
  endif
else
  echo The set of training subjects that will be used are: $TEMPLATE_SUBJECTS
endif

# (A) register training subjects and (B) apply transform to the training segmentations: TEMPLATE_SUBJECTS, TEMPLATE_SUBJECTS_DIR
set ref = $maskedfile
foreach tsubj ($TEMPLATE_SUBJECTS)
  if !($subj == $tsubj) then 
    echo TEMPLATE SUBJ $tsubj
    set in           = $TEMPLATE_SUBJECTS_DIR/$tsubj/$voltype.nii.gz
    set templatefile = $TEMPLATE_SUBJECTS_DIR/$tsubj/manualseg.nii.gz
    if !(-e $in) then
      set cmd = (mri_convert ${in:r:r}.mgz $in)
      echo $cmd >> $LF
      echo $cmd >> $sLF
      $cmd |& tee -a $LF
      if ($status) exit 1;
    endif
    if !(-e $templatefile) then
      set cmd = (mri_convert ${templatefile:r:r}.mgz $templatefile)
      echo $cmd >> $LF
      echo $cmd >> $sLF
      $cmd |& tee -a $LF
      if ($status) exit 1;
    endif
    set out         = $WORK_DIR/${tsubj}-2-${subj}.DRAMMS.nii.gz
    set outtemplate = ${out:h}/manseg-${out:t}
    # set logfile = ${out:r:r}.log
    set def     = ${out:r:r}.field.nii.gz
    if !( -e $def ) then 
      # set cmd = ($cmddir/dramms -S $in -T $ref -O $out -D $def -v -v ) # > ${logfile})
      set cmd = (dramms -S $in -T $ref -O $out -D $def -v -v ) # > ${logfile})
      echo $cmd >> $LF
      echo $cmd >> $sLF
      $cmd |& tee -a $LF
      if ($status) exit 1;
      # set cmd = ($cmddir/dramms-warp $templatefile $def $outtemplate -n)
      set cmd = (dramms-warp $templatefile $def $outtemplate -n)
      echo $cmd >> $LF
      echo $cmd >> $sLF
      $cmd |& tee -a $LF
      if ($status) exit 1;
      if ($checkresults) then        
        freeview -v $maskedfile $out ${outtemplate}:colormap=lut
      endif
    endif
  endif
end

# (C) labelfusion with kneighbor = 4 (trainingsetsize)
setenv MASKEDINPUT $maskedfile
setenv SEGOUTDIR   $WORK_DIR
set trainingsubjects = ($TEMPLATE_SUBJECTS)
echo TRAINING SUBJECTS LABELFUSION $trainingsubjects | tee -a $sLF | tee -a $LF
# if !(-e $WORK_DIR/${subj}-*labels.mrf.nii.gz) then 
if !(-e $WORK_DIR/aseg.nii.gz) then
  set cmd = (run_LabelFusion_wrapper.csh --subj $subj --ts $trainingsubjects)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;  
endif

# TODO: might want to change name in case of multiple files....
set asegfile = $WORK_DIR/${subj}-*labels.mrf.nii.gz
if ($checkresults) then 
  freeview -v $maskedfile ${asegfile}:colormap=lut
endif

if !(`find_cerebral_wm_labels.csh $asegfile`) then 
  # There was no WM label in the training data sets!
  set withGMWM = 0;
endif

# (D) postprocessing the segmentation

if !(-e $WORK_DIR/aseg.nii.gz) then 
  set cmd = (ln -s $asegfile $WORK_DIR/aseg.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;    
endif 
set asegfile = $WORK_DIR/aseg.nii.gz

# full brain
if !(-e $WORK_DIR/alllabelmask.nii.gz) then 
  set cmd = (mri_binarize --i $asegfile --o $WORK_DIR/alllabelmask.nii.gz --min 1)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 
  set cmd = (mri_distance_transform $WORK_DIR/alllabelmask.nii.gz 1 3 3 \
                   $WORK_DIR/alllabelmask.distmap.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;    
endif

# create GM as now there are parcellation labels
if ($withaparc) then
  foreach label ($parcellationlabels)
    if !(-e $WORK_DIR/aseg.binaryLabels_label$label.origval.nii.gz) then
      echo PLABEL $label
      set cmd = (isolate_labels_keeporigval.csh --vol $asegfile --outprefix $WORK_DIR/aseg.binaryLabels --L $label)
      echo $cmd >> $LF
      echo $cmd >> $sLF
      $cmd |& tee -a $LF
      if($status) exit 1;
    endif
  end
endif

# aseg with GM/WM and not parcellations
set aseggmwmfile = ${asegfile:r:r}.GMWM.nii.gz  # TODO: this might be a misnomer is no GMWM
set cmd = (cp $asegfile $aseggmwmfile)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;    

if ($withaparc) then
  foreach label ($parcellationlabels[1-7]) 
    echo PLABEL $label
    set cmd = (mri_binarize --replace $label 3 --i $aseggmwmfile --o $aseggmwmfile )
    echo $cmd >> $LF
    echo $cmd >> $sLF
    $cmd |& tee -a $LF
    if($status) exit 1;   
  end
  foreach label ($parcellationlabels[8-14])
    echo PLABEL $label
    set cmd = (mri_binarize --replace $label 42 --i $aseggmwmfile --o $aseggmwmfile )
    echo $cmd >> $LF
    echo $cmd >> $sLF
    $cmd |& tee -a $LF
    if($status) exit 1;   
  end
endif 

if !(-e ${aseggmwmfile:r:r}.edited.nii.gz) then
  if ($withGMWM) then 
    set cmd = (mri_correct_segmentations $aseggmwmfile ${aseggmwmfile:r:r}.edited.nii.gz)
  else
    set cmd = (mri_correct_segmentations -n $aseggmwmfile ${aseggmwmfile:r:r}.edited.nii.gz)
  endif
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;  
endif

# put parcellation labels back if needed
if ($withaparc) then
  set f = ${aseggmwmfile:r:r}.edited.nii.gz
  # put labels back to GM
  foreach label (3 42)
    set cmd = (isolate_labels_keeporigval.csh --vol $f --outprefix ${f:r:r}.binaryLabels --L $label)
    echo $cmd >> $LF
    echo $cmd >> $sLF
    $cmd |& tee -a $LF
    if($status) exit 1; 
  end
  set filelist = ()
  foreach label ($parcellationlabels[1-7])
    set filelist = ($filelist ${f:h}/aseg.binaryLabels_label$label.origval.nii.gz)
  end
  set cmd = (mri_or -o $filelist $WORK_DIR/tmp.orig_parcellationlabels_for_label3.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 
  set filelist = ()
  foreach label ($parcellationlabels[8-14])
    set filelist = ($filelist ${f:h}/aseg.binaryLabels_label$label.origval.nii.gz)
  end
  set cmd = (mri_or -o $filelist $WORK_DIR/tmp.orig_parcellationlabels_for_label42.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 

  set cmd = (mri_or -o ${f:r:r}.binaryLabels_label3.origval.nii.gz $WORK_DIR/tmp.orig_parcellationlabels_for_label3.nii.gz $WORK_DIR/tmp.orig_parcellationlabels_with_newlabel3.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 
  set cmd = (mri_or -o ${f:r:r}.binaryLabels_label42.origval.nii.gz $WORK_DIR/tmp.orig_parcellationlabels_for_label42.nii.gz $WORK_DIR/tmp.orig_parcellationlabels_with_newlabel42.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 

  # replace 3 and 42 with closest parcellation label
  set cmd = (cp ${aseggmwmfile:r:r}.edited.nii.gz ${aseggmwmfile:r:r}.edited.withplabels.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 
  foreach f ($WORK_DIR/tmp.orig_parcellationlabels_with_newlabel3.nii.gz  $WORK_DIR/tmp.orig_parcellationlabels_with_newlabel42.nii.gz)
    set cmd = (mri_update_parcellations $f ${f:r:r}.updated.nii.gz)

    set cmd = ($cmd; mri_update_parcellations  ${f:r:r}.updated.nii.gz ${f:r:r}.updated2.nii.gz)

    set cmd = ($cmd; mri_update_parcellations  ${f:r:r}.updated2.nii.gz ${f:r:r}.updated3.nii.gz)

    set cmd = ($cmd; mri_or -o ${aseggmwmfile:r:r}.edited.withplabels.nii.gz ${f:r:r}.updated.nii.gz  ${aseggmwmfile:r:r}.edited.withplabels.nii.gz )

    set cmd = ($cmd; mri_or -o ${aseggmwmfile:r:r}.edited.withplabels.nii.gz ${f:r:r}.updated2.nii.gz  ${aseggmwmfile:r:r}.edited.withplabels2.nii.gz )

    set cmd = ($cmd; mri_or -o ${aseggmwmfile:r:r}.edited.withplabels.nii.gz ${f:r:r}.updated3.nii.gz  ${aseggmwmfile:r:r}.edited.withplabels3.nii.gz )

    echo $cmd >> $LF
    echo $cmd >> $sLF
    $cmd |& tee -a $LF
    if($status) exit 1; 
  end
  if !(-e $WORK_DIR/finalaseg.nii.gz) then 
    set cmd = (ln -s ${aseggmwmfile:r:r}.edited.withplabels.nii.gz  $WORK_DIR/finalaseg.nii.gz) # TODO: think about name consistency -- if this one has the parcellations!
    echo $cmd >> $LF
    echo $cmd >> $sLF
    $cmd |& tee -a $LF
    if($status) exit 1; 
  endif 

  set filestoremove = ($WORK_DIR/tmp.*gz)
  set cmd = (rm -f $filestoremove)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1; 
else
  if !(-e $WORK_DIR/finalaseg.nii.gz) then 
    set cmd = (ln -s ${aseggmwmfile:r:r}.edited.nii.gz  $WORK_DIR/finalaseg.nii.gz)
    echo $cmd >> $LF
    echo $cmd >> $sLF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif 
endif

if ($checkresults) then 
  freeview -v $maskedfile $WORK_DIR/finalaseg.nii.gz:colormap=lut
endif 
   
## preprocess for surface creation

set datadir = $WORK_DIR/

# set up FS dir structure
set cmd = (mkdir -p $datadir/$subj/mri/transforms)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
set cmd = (mkdir -p $datadir/$subj/surf)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
set cmd = (mkdir -p $datadir/$subj/label)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1
set cmd = (mkdir -p $datadir/$subj/stats)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;

# mri/norm 
pushd $datadir/$subj/mri

if !(-e norm.nii.gz) then  
  set cmd = (ln -s $maskedfile norm.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
if($status) exit 1;
endif
set cmd = (mri_convert norm.nii.gz norm.mgz)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
if !(-e brain.nii.gz) then  
  set cmd = (ln -s norm.nii.gz brain.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
if !(-e brain.mgz) then  
  set cmd = (ln -s norm.mgz brain.mgz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
if !(-e brainmask.nii.gz) then  
  set cmd = (ln -s norm.nii.gz brainmask.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
if !(-e brainmask.mgz) then  
  set cmd = (ln -s norm.mgz brainmask.mgz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
# mri/aseg
if !(-e aseg.nii.gz) then  
  set cmd = (ln -s $WORK_DIR/finalaseg.nii.gz aseg.nii.gz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
set cmd = (mri_convert aseg.nii.gz aseg.mgz)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;

popd

unsetenv SUBJECTS_DIR
setenv SUBJECTS_DIR $WORK_DIR

## needed for ribbon / stats files
if !(-e $datadir/$subj/mri/transforms/talairach.auto.xfm) then
  pushd $datadir/$subj/mri/
  set cmd = (talairach_avi --i $maskedfile  --xfm $datadir/$subj/mri/transforms/talairach.auto.xfm)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
  popd
endif
if !(-e $datadir/$subj/mri/transforms/talairach.xfm) then
  set cmd = (cp $datadir/$subj/mri/transforms/talairach.auto.xfm $datadir/$subj/mri/transforms/talairach.xfm)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
##

if !(`find_cerebral_wm_labels.csh $datadir/$subj/mri/aseg.nii.gz`) then 
  echo "SKIPPING surface creation as no GM/WM separation in the segmentation!"
else
echo Creating wm surfaces.... >> $LF
# if !(-e $SUBJECTS_DIR/$subj/surf/rh.white) then
# if !(-e $SUBJECTS_DIR/$subj/label/rh.aparc.annot) then
if (1) then # 06/14/2017
  set cmd = (source $FREESURFER_HOME/bin/create_wm_surfaces_mprage_subject.csh --s $subj) 
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

## pial surface
echo Creating pial surfaces.... >> $LF
# if !(-e $SUBJECTS_DIR/$subj/surf/rh.pial) then
if !(-e $SUBJECTS_DIR/$subj/surf/rh.thickness) then
  set cmd = (source $FREESURFER_HOME/bin/create_pial_surfaces_mprage_subject.csh --s $subj)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

if ($checkresults) then 
  freeview -v $maskedfile $WORK_DIR/finalaseg.nii.gz:colormap=lut -f $SUBJECTS_DIR/$subj/surf/?h.pial $SUBJECTS_DIR/$subj/surf/?h.white 
endif 

## compute stats
if !(-e $datadir/$subj/mri/aseg.presurf.mgz) then 
  set cmd = (ln -s $datadir/$subj/mri/aseg.mgz $datadir/$subj/mri/aseg.presurf.mgz)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
set cmd = (mris_volmask --label_left_white 2 --label_left_ribbon 3 --label_right_white 41 --label_right_ribbon 42 --save_ribbon --save_distance $subj)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
pushd $datadir/$subj/label
foreach hemi (lh rh)
  set cmd = ( mris_anatomical_stats -th3 -mgz -f $datadir/$subj/stats/$hemi.aparc.stats -b -a aparc.annot -c aparc.annot.ctab $subj $hemi )
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
end
popd

##

## to get aparc+aseg
set cmd = (mri_aparc2aseg --s $subj --new-ribbon)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
##
endif

## copy files to their final location
set cmd = (cp -r $WORK_DIR/$subj/mri $FS_DIR/) 
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
set cmd = (cp -r $WORK_DIR/$subj/surf $FS_DIR/)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
set cmd = (cp -r $WORK_DIR/$subj/label $FS_DIR/)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
set cmd = (cp -r $WORK_DIR/$subj/stats $FS_DIR/)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
set cmd = (mkdir -p $FS_DIR/log)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;
set cmd = (cp $WORK_DIR/*log $FS_DIR/log/)
echo $cmd >> $LF
echo $cmd >> $sLF
$cmd |& tee -a $LF
if($status) exit 1;

## file cleanup
if ($cleanup) then
  set filestoremove = ($WORK_DIR/*gz $WORK_DIR/$subj-with* $WORK_DIR/surf $FS_DIR/surf/*tmp)
  set cmd = (rm -fr  $filestoremove)
  echo $cmd >> $LF
  echo $cmd >> $sLF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

##
echo "Successfully finished infant_recon_all" >> $LF
echo "Successfully finished infant_recon_all" >> $sLF
set EndTime = `date +%s`;
@ DiffTime = $EndTime - $StartTime
set TimeMsg = "infant_recon_all: The whole process took $DiffTime seconds"
echo $TimeMsg |& tee -a $sLF
echo $TimeMsg >> $LF


############--------------##################
usage_exit:

if($PrintHelp) then
  cat $0 | \
    awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
else
  echo "Usage: infant_recon_all --s <subj> --age <age_in_months>"
  echo "Help:  infant_recon_all --help"
endif

exit 1;

#---- Everything below is printed out as part of help -----#
#-- During make install, the output of 'fsPrintHelp infant_recon_all.help.xml' -- #
#-- is concatenated to this file --#
BEGINHELP
